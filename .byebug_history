exit
5 / 2
(7 /2).float
7 /2.float
7 /2.round
7 /2
5 / 2
5/2
@clicks.count / 2.round
@clicks.count / 2
exit
pp ClickFinder.get_valid_clicks(@clicks)
ClickFinder.get_valid_clicks(@clicks)
exit
pp ClickFinder.group_clicks_by_ip(@clicks)
ClickFinder.group_clicks_by_ip(@clicks)
        assert_equal({"22.22.22.22"=>[{:ip=>"22.22.22.22", :timestamp=>"3/11/2016 02:02:58", :amount=>7.0}, {:ip=>"22.22.22.22", :timestamp=>"3/11/2016 23:59:59", :amount=>9.0}]}, ClickFinder.group_clicks_by_ip(@clicks))
continue
        assert_equal([{:ip=>"22.22.22.22", :timestamp=>"3/11/2016 23:59:59", :amount=>9.0}, {:ip=>"55.55.55.55", :timestamp=>"3/11/2016 17:18:19", :amount=>11.25}], ClickFinder.get_max_value(ClickFinder.group_clicks_by_ip(@clicks)) )
ClickFinder.get_max_value(ClickFinder.group_clicks_by_ip(@clicks)) 
exit
        assert_equal(@tests_should_equal, ClickFinder.filter_for_10_or_more_clicks(@clicks_10))
exit
pp ClickFinder.filter_for_10_or_more_clicks(@clicks_10)
        assert_equal([{:ip=>"22.22.22.22", :timestamp=>"3/11/2016 02:02:58", :amount=>7.0}, {:ip=>"22.22.22.22", :timestamp=>"3/11/2016 23:59:59", :amount=>9.0}], ClickFinder.filter_for_10_or_more_clicks(@clicks_10))
exit
pp ClickFinder.filter_for_10_or_more_clicks(@clicks)
pp ClickFinder.filter_for_10_or_more_clicks(@clicks).count
ClickFinder.filter_for_10_or_more_clicks(@clicks).count
ClickFinder.filter_for_10_or_more_clicks(@clicks)
exit
assert_equal(12, ClickFinder.get_clicks_with_in_period(@clicks).count, "Objects Created While Making Time Periods Is Off")
exit
DataModule::CLICKS
@clicks.count
        @clicks = DataModule::CLICKS
@clicks.count
exit
@clicks
assert_equal(12, ClickFinder.get_clicks_with_in_period(@clicks).count)
exit
ClickFinder.filter_for_10_or_more_clicks(@clicks)
ClickFinder.filter_for_10_or_more_clicks(@clicks))
        assert_equal({:ip=>"55.55.55.55", :timestamp=>"3/11/2016 14:02:54", :amount=>4.25}, ClickFinder.filter_for_10_or_more_clicks(@clicks))
exit
@clicks
ClickFinder.filter_for_10_or_more_clicks(@clicks)
ClickFinder.filter_for_10_or_more_clicks(@clicks).last
ClickFinder.filter_for_10_or_more_clicks(@clicks).last)
exit
ClickFinder.get_valid_clicks(@clicks)
ClickFinder.get_valid_clicks(@clicks).count
@clicks.count
@clicks
ClickFinder.get_valid_clicks(@clicks)
ClickFinder.get_best_time_value_click(@clicks)
ClickFinder.get_best_time_value_click(ClickFinder.get_best_time_value_click(@clicks))
ClickFinder.get_best_time_value_click(ClickFinder.get_best_time_value_click(@clicks)
ClickFinder.get_best_time_value_click(ClickFinder.get_best_time_value_click(@clicks))
        assert_equal([{:ip=>"22.22.22.22", :timestamp=>"3/11/2016 23:59:59", :amount=>9.0}], ClickFinder.get_max_value(ClickFinder.group_clicks_by_ip(@clicks)) )
ClickFinder.get_max_value(ClickFinder.group_clicks_by_ip(@clicks))
ClickFinder.get_max_value(@clicks)
ClickFinder.get_max_value(@clicks.first)
ClickFinder.get_max_value(@clicks)
        assert_equal({"22.22.22.22"=>[{:ip=>"22.22.22.22", :timestamp=>"3/11/2016 02:02:58", :amount=>7.0}, {:ip=>"22.22.22.22", :timestamp=>"3/11/2016 23:59:59", :amount=>9.0}]}, ClickFinder.group_clicks_by_ip(@clicks))
ClickFinder.group_clicks_by_ip(@clicks)
ClickFinder.group_clicks_by_ip(@clicks.first)
ClickFinder.    def self.group_clicks_by_ip(click_obj)
        assert_equal([{:ip=>"22.22.22.22", :timestamp=>"3/11/2016 02:02:58", :amount=>7.0}, {:ip=>"22.22.22.22", :timestamp=>"3/11/2016 23:59:59", :amount=>9.0}], ClickFinder.delete_click_obj(@clicks, "55.55.55.55"))
ClickFinder.delete_click_obj(@clicks, "55.55.55.55")
        assert_equal({:ip=>"55.55.55.55", :timestamp=>"3/11/2016 14:02:54", :amount=>4.25}, ClickFinder.filter_for_10_or_more_clicks(@clicks).last)
ClickFinder.filter_for_10_or_more_clicks(@clicks).last
ClickFinder.filter_for_10_or_more_clicks(@clicks)
assert_equal("22.22.22.22", ClickFinder.get_clicks_with_in_period(@clicks)["2016-11-03T02:00:00+00:00"][0][:ip])
assert_equal("22.22.22.22", ClickFinder.get_clicks_with_in_period(@clicks)["2016-11-03T02:00:00+00:00"][0], :ip)
test
description
describe
assert_respond_to 'string', :to_yaml
'safa'.to_yaml
'safa'.to_s
'safa'.to_a
assert_respond_to 'string', :to_a
assert_respond_to("22.22.22.22", ClickFinder.get_clicks_with_in_period(@clicks)["2016-11-03T02:00:00+00:00"][0], :ip)
assert_respond_to("22.22.22.22", ClickFinder.get_clicks_with_in_period(@clicks)["2016-11-03T02:00:00+00:00"][0])
assert_respond_to("22.22.22.22", ClickFinder.get_clicks_with_in_period(@clicks)["2016-11-03T02:00:00+00:00"][0][:ip])
assert_respond_to(ClickFinder.get_clicks_with_in_period(@clicks)["2016-11-03T02:00:00+00:00"][0][:ip], Symbol)
assert_respond_to(ClickFinder.get_clicks_with_in_period(@clicks)["2016-11-03T02:00:00+00:00"][0][:ip], String)
assert_respond_to(ClickFinder.get_clicks_with_in_period(@clicks)["2016-11-03T02:00:00+00:00"][0][:ip])
assert_respond_to(ClickFinder.get_clicks_with_in_period(@clicks)["2016-11-03T02:00:00+00:00"][0][:ip], "22.22.22.22")
ClickFinder.get_clicks_with_in_period(@clicks)["2016-11-03T02:00:00+00:00"][0][:ip]
ClickFinder.get_clicks_with_in_period(@clicks)["2016-11-03T02:00:00+00:00"][0]
ClickFinder.get_clicks_with_in_period(@clicks)["2016-11-03T02:00:00+00:00"]
        assert_respond_to(ClickFinder.get_clicks_with_in_period(@clicks)["2016-11-03T02:00:00+00:00"], [{:amount=>7.0, :ip=>"22.22.22.22", :timestamp=>"3/11/2016 02:02:58"}])
        assert_respond_to(ClickFinder.get_clicks_with_in_period(@clicks), "2016-11-03T02:00:00+00:00")
        assert_responds_to(ClickFinder.get_clicks_with_in_period(@clicks), "2016-11-03T02:00:00+00:00")
        assert_equal(12, ClickFinder.get_clicks_with_in_period(@clicks).count, "Objects Created While Making Time Periods Is Off")
        assert_responds_to(ClickFinder.get_clicks_with_in_period(@clicks), "2016-11-03T02:00:00+00:00")
        assert_respond_to(ClickFinder.get_clicks_with_in_period(@clicks), "2016-11-03T02:00:00+00:00")
        assert_responds_to(ClickFinder.get_clicks_with_in_period(@clicks), "2016-11-03T02:00:00+00:00")
pp ClickFinder.get_clicks_with_in_period(@clicks)
@clicks.count
ClickFinder.get_clicks_with_in_period(@clicks).count
ClickFinder.get_clicks_with_in_period(@clicks)
exit
assert_instance_of(DateTime, ClickFinder.get_time_obj_keys(first_click)["time_of_click"])
assert_in_delta(ClickFinder.get_time_obj_keys(first_click)["time_of_click"])
assert_delta(ClickFinder.get_time_obj_keys(first_click)["time_of_click"])
ClickFinder.get_time_obj_keys(first_click)["time_of_click"]
ClickFinder.get_time_obj_keys(first_click)[:time_of_click]
assert_respond_to(ClickFinder.get_time_obj_keys(first_click), :time_of_click)
ClickFinder.get_time_obj_keys(first_click)[:time_of_click]
ClickFinder.get_time_obj_keys(first_click)["time_of_click"]
assert_respond_to(ClickFinder.get_time_obj_keys(first_click), "time_of_click")
ClickFinder.get_time_obj_keys(first_click)
exit
assert_equal(@clicks.last, { ip:'55.55.55.55', timestamp:'3/11/2016 14:02:54', amount: 4.25 })
exit
@clicks
exit
DataModule::CLICKS.count
DataModule::CLICKS.COUNT
DataModule::CLICKS
DataModule
exit
DataModule::CLICKS.count
continue
DataModule::CLICKS.count
continue
whereami
DataModule::CLICKS.count
DataModule::CLICKS
CLICKS
@clicks
clicks
exit
@clicks
CLICKS
clicks
exit
@clicks
CLICKS
ClickFinder::CLICKS.count
exit
ClickFinder::CLICKS.count
        assert_equal(ClickFinder::CLICKS.last, {:ip=>"22.22.22.22", :timestamp=>"3/11/2016 23:59:59", :amount=>9.0})
exit
CF::CLICKS.count
CF::CLICKS
CF::CLICKS.last
assert_equal(CF::CLICKS.last, {:ip=>"22.22.22.22", :timestamp=>"3/11/2016 23:59:59", :amount=>9.0})
CF::CLICKS.last
exit
assert_not_respond_to(t, "time_of_click")
assert_respond_to(t, "time_of_click")
assert_respond_to(t, :time_of_click)
t = CF.get_time_obj_keys(first_click)
assert_respond_to(CF.get_time_obj_keys(first_click), :time_of_click)
assert_respond_to(CF.get_time_obj_keys(first_click), :time_of_click, DateTime.new)
CF.get_time_obj_keys(first_click)
assert_respond_to(CF.get_time_obj_keys(first_click), "time_of_click", DateTime.new)
assert_respond_to(CF.get_time_obj_keys(first_click), "time_of_click", DateTime)
assert_respond_to(CF.get_time_obj_keys(first_click), "time_of_click")
CF.get_time_obj_keys(first_click = CF::CLICKS.first)
CF.get_time_obj_keys
CF::CLICKS
CF = ClickFinder
cf
cf::CLICKS
cf.CLICKS
cf = ClickFinder.new
exit
@clicks.last
@clicks.count
@clicks
clicks
exit
@clicks.count
exit
clicks.count
exit
clicks.count
clicks
exit
continue
exit
clicks
clicks = DataModule::CLICKS
DataModule::CLICKS
DataModule
exit
ClickFinder.group_clicks_by_ip([{ ip:'22.22.22.22', timestamp:'3/11/2016 02:02:58', amount: 7.00 }])
ClickFinder.group_clicks_by_ip({ ip:'22.22.22.22', timestamp:'3/11/2016 02:02:58', amount: 7.00 })
ClickFinder.group_clicks_by_ip(clicks = [)
ClickFinder.group_clicks_by_ip
ClickFinder::clicks
ClickFinder:clicks
ClickFinder.clicks
ClickFinder
exit
!!!
Data::CLICKS
require_relative './data2'
exit
Data::clicks
Data.clicks
require_relative './data2'
DataModule::CLICKS
require_relative './data'
exit
EXIT
DataModule::CLICKS
DataModule::clicks
require_relative './data'
exit
require_relative './data'
clicks
require_relative './data2'
exit
require_relative './data'
include 'data'
require_relative 'data'
require 'data'
exit
require_relative './data'
require 'data'
require './data'
include data
require_relative 'data'
$LOAD_PATH << '.'
require_relative './data'
require_relative 'data'
include data
include './data'
require './data'
require 'data'
exit
result
exit
!!!
max_value_found
exit
time_range_obj
time_range_obj[start_time_string]
continue
next
exit
time_range_obj
time_range_obj[start_time_string].class 
time_range_obj[start_time_string].class != Array
continue
exit
time_range_obj[start_time_string] == Array
time_range_obj[start_time_string].class 
time_range_obj[start_time_string].class != Object
time_range_obj[start_time_string] != Object
